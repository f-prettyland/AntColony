para calc pheremone array
improve function
ACS
para calc prob array

Not running right? Do you:
	DO YOU CALL THE FUNCTION?
	have __ flags
	reference correct global id
	reference correct kernel
	use correct platform

-------------
Different parallelisations:
-------------
	-ants
		better with larger graphs where explore less?
	-probablity of edge
		should be better with smaller
		should be broken down per node as need sum of all vals to do
	-phermonal calc update


-------------
Compare:
-------------
	- prove random araray is random (enough)
	- diff attract-cost functions 
	- probable edge check for zero case and does no maths, see if this speeds up
	- compiling with constants
	- different start location should have no diff
	- using private constant to global const
		//eeehh, maybe to show off understandinf of openCL


-------------
Discuss ants:
-------------
	- non-read&write soln array, instead keep one private

	- not using the cost array effectively, recalcing all of this so many times (well depending on k)

	- attract from cost so can vary what causes attraction

	- Use of boolean array to represent visited nodes, since need to visit all and need to look up often is much faster
		does this affect memory? How much?
		there is code in APPEND if wanna use

	- Calc edgeAttraction 
		Scalable option as takes less space, but with more trivial calculations:
			Calc all and leave them with scores of 0... This means more iterations of simple maths
		CANNOT REALLOC therefore pointless: Counting how many used
			Should realloc just to needed nodes? Currently just ignores final x elements
			Also need second array to map what element means what node
		
	Calculate values and sum whilst going through, only use sum in finding of probable edge and means you don't have to divide by sum immmediately after, instead only done when needed

	Randomness
		Using Xorshift
		https://stackoverflow.com/questions/9912143/how-to-get-a-random-number-in-opencl

-------------
Discuss Phere
-------------
	Our AS uses
		1/C as our g(ij)

		needs to be Cmax/C
			otherwise scaling doesn't work

	Initial if unset is taken from random walk

	http://research.ijcaonline.org/volume97/number10/pxc3897353.pdf
		Defines difference between Ant System and Ant Colony System [ACS has global/local]


	----
	ACS
	----
	H.-B.    Duan,    Ant    Colony    Algorithms: Theory  and  Applications.  Beijing:  Science Press, 2005
		Global is plussin
		Local is evap
			Local should be done IMMEDIATELY after edge navigation

	http://people.idsia.ch/~luca/acs-bio97.pdf
			Only best route deposit pheremone
		Global update: Inversely proportional to length of tour - The shorter the tour the greater the amount of pheromone deposited on edge

		Use local updating to evaporate a path WHEN CHOSEN BY AN ANT

	http://www.ijera.com/papers/Vol4_issue6/Version%203/K046036367.pdf
			Only best route deposit pheremone
		Global - inverse proportional to evap const (p/L)

-------------
Discuss generic:
-------------
	appropriately named functions instead

	used |= to represent status so using or thus checking for failure

	Have max 15 digit size due to replace see const

	This is an undirected graph, it _should_ have triangular array.
		Requires much more searching? NO, just more accessing?

	Lets assume graph is COMPLETE
		assume no zero cost edges (these are used to show inability to cross)

	Need to beat O(n!) complexity to be better than all permutations

	pseudo-random walks are like that seen in Q-learning (Watkins and Dayan, 1992)
		then with pheremone evap encourages more exploration

-------------
TODO
-------------
	Conditional path taking using PCG as random generator
		\cite{neill}
		http://www.pcg-random.org/paper.html

	apply mutation to avoid local loop
		http://link.springer.com/chapter/10.1007/3-540-45724-0_20
	Other variants
		http://www.codeproject.com/Articles/644067/Applying-Ant-Colony-Optimization-Algorithms-to-Sol




-------------
APPEND
-------------
		
//using shitty visitin list
bool hasSeen(int* visited, int possVisit){
	for (int i = 0; i < numNodes; ++i)
	{
		if(visited[i]== possVisit){
			return true;
		}
	}
	return false;
}
